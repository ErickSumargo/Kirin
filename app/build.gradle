def plugins = [
    "com.android.application",
    "com.google.gms.google-services",
    "com.google.firebase.crashlytics",
    "kotlin-android",
    "kotlin-android-extensions",
    "kotlin-kapt",
    "dagger.hilt.android.plugin",
    "com.hiya.jacoco-android"
]

plugins.forEach { plugin ->
    apply plugin: plugin
}

android {
    compileSdkVersion sdk.compile

    defaultConfig {
        applicationId "com.bael.kirin"
        minSdkVersion sdk.min
        targetSdkVersion sdk.target
        versionCode sdk.code
        versionName sdk.version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [
                analyticsEnabled    : "false",
                crashlyticsEnabled  : "false"
            ]
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [
                analyticsEnabled    : "true",
                crashlyticsEnabled  : "true"
            ]
        }
    }

    flavorDimensions "mode"
    productFlavors {
        production {
            dimension "mode"
        }
    }

    lintOptions {
        tasks.lint.enabled = false
    }

    packagingOptions {
        exclude 'project.properties'
        exclude 'META-INF/INDEX.LIST'
    }
}

def deps = [
    "appcompat",
    "hilt",
    "lifecycle",
    "translate"
]

deps.forEach { dep ->
    apply from: "$rootDir/deps/${dep}.gradle"
}

def modules = [
    "feature_translation",
    "lib_api_translation",
    "lib_arch",
    "lib_data",
    "lib_logger",
    "lib_message",
    "lib_network",
    "lib_preference",
    "lib_resource",
    "lib_security",
    "lib_storage",
    "lib_threading",
    "lib_tracker",
    "lib_ui"
]

dependencies {
    modules.forEach { module ->
        implementation project(":$module")
    }
}
